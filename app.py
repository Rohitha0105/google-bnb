import os
import google.generativeai as genai
from flask import Flask, render_template, request, redirect, url_for
from werkzeug.utils import secure_filename
# Configure the Flask app
app = Flask(__name__)

# Set up your Gemini API key (make sure GEMINI_API_KEY is in your environment)
from dotenv import load_dotenv
import os

# Load environment variables from .env file
load_dotenv()

# Retrieve API key from environment variables
api_key = os.getenv("GEMINI_API_KEY")


genai.configure(api_key=api_key)

# Allowed file extensions for the image uploads
ALLOWED_EXTENSIONS = {'jpg', 'jpeg', 'png'}

# Function to check allowed file types
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# Function to upload the file to Gemini
def upload_to_gemini(path, mime_type=None):
    """Uploads the given file to Gemini."""
    file = genai.upload_file(path, mime_type=mime_type)
    print(f"Uploaded file '{file.display_name}' as: {file.uri}")
    return file

# Create the model configuration
generation_config = {
  "temperature": 0.9,
  "top_p": 0.95,
  "top_k": 40,
  "max_output_tokens": 8192,
  "response_mime_type": "text/plain",
}

model = genai.GenerativeModel(
  model_name="gemini-1.5-pro",
  generation_config=generation_config,
)

# Route to display the home page
@app.route('/')
def index():
    return render_template('index.html')

# Route to handle image upload and recipe generation
@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return redirect(request.url)
    file = request.files['file']
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join('static/uploads', filename)
        file.save(file_path)

        # Upload to Gemini and generate the recipe
        uploaded_file = upload_to_gemini(file_path, mime_type='image/jpeg')

        # Start a chat session with the model to process the image
        chat_session = model.start_chat(
            history=[{
                "role": "user",
                "parts": [
                    uploaded_file,
                    "Accurately identify the baked good in the image and provide an appropriate recipe consistent with your analysis."
                ]
            }]
        )

        response = chat_session.send_message("Please provide the recipe based on the image.")
        recipe_text = response.text  # The recipe generated by Gemini

        return render_template('recipe.html', recipe=recipe_text, image_url=file_path)

    return "Invalid file format. Please upload a .jpg, .jpeg, or .png file."

if __name__ == '__main__':
    app.run(debug=True)
